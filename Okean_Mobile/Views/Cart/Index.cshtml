@model IEnumerable<Okean_Mobile.Models.CartItem>

@{
    ViewData["Title"] = "Giỏ hàng";
    Layout = "~/Views/Shared/_LayoutWithFooter.cshtml";
}

<div class="container mt-4">
    <h1 class="mb-4">Giỏ hàng của bạn</h1>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-shopping-cart me-2"></i>Giỏ hàng của bạn đang trống
        </div>
        <a asp-controller="CustomerProduct" asp-action="Index" class="btn btn-primary">
            <i class="fas fa-arrow-left me-2"></i>Tiếp tục mua sắm
        </a>
    }
    else
    {
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Sản phẩm</th>
                        <th>Giá</th>
                        <th>Số lượng</th>
                        <th>Tổng</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr data-cart-item-id="@item.Id">
                            <td>
                                <div class="d-flex align-items-center">
                                    @if (!string.IsNullOrEmpty(item.Product.ImageUrl))
                                    {
                                        <img src="@item.Product.ImageUrl" alt="@item.Product.Name" 
                                             class="me-3" style="width: 80px; height: 80px; object-fit: cover;">
                                    }
                                    <div>
                                        <h5 class="mb-1">@item.Product.Name</h5>
                                        <p class="text-muted mb-0">@item.Product.Category?.Name</p>
                                    </div>
                                </div>
                            </td>
                            <td class="align-middle">@item.Product.Price.ToString("N0") đ</td>
                            <td class="align-middle">
                                <div class="input-group" style="width: 120px;">
                                    <button class="btn btn-outline-secondary decrease-quantity" 
                                            data-cart-item-id="@item.Id" type="button">-</button>
                                    <input type="number" class="form-control text-center quantity-input" 
                                           value="@item.Quantity" min="1" max="@item.Product.StockQuantity"
                                           data-cart-item-id="@item.Id">
                                    <button class="btn btn-outline-secondary increase-quantity" 
                                            data-cart-item-id="@item.Id" type="button">+</button>
                                </div>
                            </td>
                            <td class="align-middle">
                                <span class="item-total">@((item.Quantity * item.Product.Price).ToString("N0"))</span> đ
                            </td>
                            <td class="align-middle">
                                <button class="btn btn-danger remove-item" data-cart-item-id="@item.Id">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" class="text-end"><strong>Tổng cộng:</strong></td>
                        <td colspan="2">
                            <strong class="total-amount">@Model.Sum(item => item.Quantity * item.Product.Price).ToString("N0")</strong> đ
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="d-flex justify-content-between mt-4">
            <a asp-controller="CustomerProduct" asp-action="Index" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i>Tiếp tục mua sắm
            </a>
            <button class="btn btn-success" id="create-order">
                <i class="fas fa-shopping-bag me-2"></i>Tạo đơn hàng
            </button>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Update quantity when input changes
            $('.quantity-input').on('change', function() {
                var cartItemId = $(this).data('cart-item-id');
                var quantity = parseInt($(this).val());
                var maxValue = parseInt($(this).attr('max'));
                
                if (quantity < 1) {
                    $(this).val(1);
                    quantity = 1;
                } else if (quantity > maxValue) {
                    $(this).val(maxValue);
                    quantity = maxValue;
                }
                updateQuantity(cartItemId, quantity);
            });

            // Decrease quantity
            $('.decrease-quantity').on('click', function() {
                var input = $(this).siblings('.quantity-input');
                var currentValue = parseInt(input.val());
                if (currentValue > 1) {
                    input.val(currentValue - 1).trigger('change');
                }
            });

            // Increase quantity
            $('.increase-quantity').on('click', function() {
                var input = $(this).siblings('.quantity-input');
                var currentValue = parseInt(input.val());
                var maxValue = parseInt(input.attr('max'));
                
                if (currentValue < maxValue) {
                    input.val(currentValue + 1).trigger('change');
                } else {
                    alert('Số lượng sản phẩm trong kho không đủ');
                }
            });

            // Remove item
            $('.remove-item').on('click', function() {
                var cartItemId = $(this).data('cart-item-id');
                removeItem(cartItemId);
            });

            // Create order
            $('#create-order').on('click', function() {
                window.location.href = '@Url.Action("Create", "Order")';
            });

            function updateQuantity(cartItemId, quantity) {
                // Store current value before update
                var input = $('input[data-cart-item-id="' + cartItemId + '"]');
                input.data('previous-value', input.val());

                $.ajax({
                    url: '/Cart/UpdateQuantity',
                    type: 'POST',
                    data: { 
                        cartItemId: cartItemId, 
                        quantity: quantity,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update total
                            $('.total-amount').text(response.total.toLocaleString());
                            // Update item total
                            var row = $('tr[data-cart-item-id="' + cartItemId + '"]');
                            var price = parseFloat(row.find('td:eq(1)').text().replace(/[^0-9.-]+/g, ''));
                            var itemTotal = (price * quantity).toLocaleString();
                            row.find('.item-total').text(itemTotal);
                            // Update cart count in navbar
                            updateCartCount();
                        } else {
                            alert(response.message);
                            // Reset input to previous value
                            input.val(input.data('previous-value'));
                        }
                    },
                    error: function() {
                        alert('Có lỗi xảy ra khi cập nhật số lượng');
                        // Reset input to previous value
                        input.val(input.data('previous-value'));
                    }
                });
            }

            function removeItem(cartItemId) {
                if (confirm('Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                    $.ajax({
                        url: '/Cart/RemoveItem',
                        type: 'POST',
                        data: { 
                            cartItemId: cartItemId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                // Remove row from table
                                $('tr[data-cart-item-id="' + cartItemId + '"]').remove();
                                // Update total
                                $('.total-amount').text(response.total.toLocaleString());
                                // Update cart count in navbar
                                $('.cart-count').text(response.cartCount);
                                // If cart is empty, reload page
                                if (response.cartCount === 0) {
                                    location.reload();
                                }
                            }
                        },
                        error: function() {
                            alert('Có lỗi xảy ra khi xóa sản phẩm');
                        }
                    });
                }
            }

            function updateCartCount() {
                $.get('/Cart/GetCartCount', function(data) {
                    $('.cart-count').text(data.count);
                });
            }

            // Store initial values
            $('.quantity-input').each(function() {
                $(this).data('previous-value', $(this).val());
            });
        });
    </script>
}